// Generated by CoffeeScript 1.9.2
module.exports = function() {
  var res;
  return res = {
    _forward: {},
    _backward: {},
    _permissions: {},
    add: function(from, to) {
      if (res._forward[from] == null) {
        res._forward[from] = {};
      }
      res._forward[from][to] = true;
      if (res._backward[to] == null) {
        res._backward[to] = {};
      }
      return res._backward[to][from] = true;
    },
    remove: function(from, to) {
      if (res._forward[from] != null) {
        delete res._forward[from][to];
      }
      if (res._backward[to] != null) {
        return delete res._backward[to][from];
      }
    },
    allow: function(from, to) {
      if (res._permissions[from] == null) {
        res._permissions[from] = {};
      }
      return res._permissions[from][to] = true;
    },
    disallow: function(from, to) {
      if (res._permissions[from] == null) {
        return;
      }
      return delete res._permissions[from][to];
    },
    parents: function(from) {
      if (res._forward[from] == null) {
        return [];
      }
      return Object.keys(res._forward[from]);
    },
    ancestors: function(from) {
      var ancestors, check, current, i, len, processing;
      current = [];
      processing = [from];
      ancestors = [];
      while (processing.length > 0) {
        ancestors = ancestors.concat(current);
        current = [];
        for (i = 0, len = processing.length; i < len; i++) {
          check = processing[i];
          current = current.concat(res.parents(check));
        }
        processing = current;
      }
      return ancestors;
    },
    children: function(from) {
      if (res._backward[from] == null) {
        return [];
      }
      return Object.keys(res._backward[from]);
    },
    descendants: function(from) {
      var check, current, descendants, i, len, processing;
      current = [];
      processing = [from];
      descendants = [];
      while (processing.length > 0) {
        descendants = descendants.concat(current);
        current = [];
        for (i = 0, len = processing.length; i < len; i++) {
          check = processing[i];
          current = current.concat(res.children(check));
        }
        processing = current;
      }
      return descendants;
    },
    membership: function(from) {
      return res.ancestors(from).concat([from]);
    },
    permissions: function(from) {
      var i, len, member, membership, permissions;
      membership = res.membership(from).concat(res.membership('*'));
      permissions = [];
      for (i = 0, len = membership.length; i < len; i++) {
        member = membership[i];
        if (res._permissions[member] == null) {
          continue;
        }
        permissions = permissions.concat(Object.keys(res._permissions[member]));
      }
      return permissions;
    },
    can: function(from, to) {
      var i, len, member, membership;
      membership = res.membership(from).concat(res.membership('*'));
      for (i = 0, len = membership.length; i < len; i++) {
        member = membership[i];
        if (res._permissions[member] == null) {
          continue;
        }
        if (res._permissions[member][to] != null) {
          return true;
        }
        if (res._permissions[member]['*'] != null) {
          return true;
        }
      }
      return false;
    }
  };
};
